//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\czobo\Documents\GitHub\BDG\BDG_Language\Language\Combined1.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Language {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class Combined1Parser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, T__77=78, T__78=79, T__79=80, 
		T__80=81, T__81=82, T__82=83, T__83=84, COMMENT=85, LINE_COMMENT=86, INTEGER=87, 
		FLOAT=88, STRING=89, BOOL=90, NULL=91, ID=92, WS=93;
	public const int
		RULE_program = 0, RULE_comment = 1, RULE_line = 2, RULE_block = 3, RULE_logStatement = 4, 
		RULE_phase = 5, RULE_ifBlock = 6, RULE_elseifBlock = 7, RULE_repeatUntil = 8, 
		RULE_statement = 9, RULE_declaration = 10, RULE_assignment = 11, RULE_stop = 12, 
		RULE_cancel = 13, RULE_variable = 14, RULE_pieceType = 15, RULE_parameterList = 16, 
		RULE_type = 17, RULE_member = 18, RULE_field = 19, RULE_tile = 20, RULE_collection = 21, 
		RULE_list = 22, RULE_element = 23, RULE_functionBody = 24, RULE_functionBlock = 25, 
		RULE_functionCall = 26, RULE_functionName = 27, RULE_expression = 28, 
		RULE_turnStages = 29, RULE_input = 30, RULE_inputTypes = 31, RULE_pieceMoveTypes = 32, 
		RULE_neighbors = 33, RULE_multOp = 34, RULE_addOp = 35, RULE_compareOp = 36, 
		RULE_boolOp = 37, RULE_constant = 38, RULE_color = 39;
	public static readonly string[] ruleNames = {
		"program", "comment", "line", "block", "logStatement", "phase", "ifBlock", 
		"elseifBlock", "repeatUntil", "statement", "declaration", "assignment", 
		"stop", "cancel", "variable", "pieceType", "parameterList", "type", "member", 
		"field", "tile", "collection", "list", "element", "functionBody", "functionBlock", 
		"functionCall", "functionName", "expression", "turnStages", "input", "inputTypes", 
		"pieceMoveTypes", "neighbors", "multOp", "addOp", "compareOp", "boolOp", 
		"constant", "color"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "'#'", "';'", "'Phase'", "'if'", "'('", "')'", "'else'", 
		"'repeat'", "'until'", "'='", "'stop'", "'cancel'", "','", "'Player'", 
		"'Piece'", "'Tile'", "'Dice'", "'List'", "'.'", "'pieces'", "'tiles'", 
		"'players'", "'empty'", "'posX'", "'posY'", "'player'", "'color'", "'route'", 
		"'routePosition'", "'texture'", "'type'", "'name'", "'value'", "'size'", 
		"'active'", "'text'", "'@'", "'all'", "'none'", "'any'", "'count'", "'['", 
		"']'", "'Rule'", "'Turn'", "'EndTurn'", "'WinCondition'", "'MoveTo'", 
		"'Remove'", "'TryTurn'", "'Add'", "'Move'", "'Find'", "'Roll'", "'!'", 
		"'|'", "'-'", "'<'", "'>'", "'SelectPiece'", "'SelectTile'", "'INPUT'", 
		"'Click'", "'Press'", "'Step'", "'Slide'", "'Jump'", "'N'", "'E'", "'S'", 
		"'W'", "'*'", "'/'", "'%'", "'+'", "'=='", "'!='", "'>='", "'<='", "'AND'", 
		"'OR'", "'Color'", null, null, null, null, null, null, "'NULL'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "COMMENT", "LINE_COMMENT", "INTEGER", "FLOAT", "STRING", "BOOL", 
		"NULL", "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Combined1.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public Combined1Parser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(Combined1Parser.Eof, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__9) | (1L << T__12) | (1L << T__13) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55))) != 0) || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (COMMENT - 85)) | (1L << (LINE_COMMENT - 85)) | (1L << (ID - 85)))) != 0)) {
				{
				State = 82;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case T__0:
				case T__2:
				case T__4:
				case T__5:
				case T__6:
				case T__9:
				case T__12:
				case T__13:
				case T__15:
				case T__16:
				case T__17:
				case T__18:
				case T__19:
				case T__20:
				case T__21:
				case T__22:
				case T__23:
				case T__24:
				case T__25:
				case T__26:
				case T__27:
				case T__28:
				case T__29:
				case T__30:
				case T__31:
				case T__32:
				case T__33:
				case T__34:
				case T__35:
				case T__36:
				case T__37:
				case T__38:
				case T__39:
				case T__40:
				case T__41:
				case T__42:
				case T__43:
				case T__45:
				case T__46:
				case T__47:
				case T__48:
				case T__49:
				case T__50:
				case T__51:
				case T__52:
				case T__53:
				case T__54:
				case T__55:
				case ID:
					{
					State = 80; line();
					}
					break;
				case COMMENT:
				case LINE_COMMENT:
					{
					State = 81; comment();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 86;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 87; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		public ITerminalNode COMMENT() { return GetToken(Combined1Parser.COMMENT, 0); }
		public ITerminalNode LINE_COMMENT() { return GetToken(Combined1Parser.LINE_COMMENT, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_comment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			_la = _input.La(1);
			if ( !(_la==COMMENT || _la==LINE_COMMENT) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public PhaseContext phase() {
			return GetRuleContext<PhaseContext>(0);
		}
		public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		public RepeatUntilContext repeatUntil() {
			return GetRuleContext<RepeatUntilContext>(0);
		}
		public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LogStatementContext logStatement() {
			return GetRuleContext<LogStatementContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_line);
		try {
			State = 99;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 91; statement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 92; phase();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 93; ifBlock();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 94; repeatUntil();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 95; functionBody();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 96; functionCall();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 97; block();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 98; logStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101; Match(T__0);
			State = 106;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__9) | (1L << T__12) | (1L << T__13) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55))) != 0) || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (COMMENT - 85)) | (1L << (LINE_COMMENT - 85)) | (1L << (ID - 85)))) != 0)) {
				{
				State = 104;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case T__0:
				case T__2:
				case T__4:
				case T__5:
				case T__6:
				case T__9:
				case T__12:
				case T__13:
				case T__15:
				case T__16:
				case T__17:
				case T__18:
				case T__19:
				case T__20:
				case T__21:
				case T__22:
				case T__23:
				case T__24:
				case T__25:
				case T__26:
				case T__27:
				case T__28:
				case T__29:
				case T__30:
				case T__31:
				case T__32:
				case T__33:
				case T__34:
				case T__35:
				case T__36:
				case T__37:
				case T__38:
				case T__39:
				case T__40:
				case T__41:
				case T__42:
				case T__43:
				case T__45:
				case T__46:
				case T__47:
				case T__48:
				case T__49:
				case T__50:
				case T__51:
				case T__52:
				case T__53:
				case T__54:
				case T__55:
				case ID:
					{
					State = 102; line();
					}
					break;
				case COMMENT:
				case LINE_COMMENT:
					{
					State = 103; comment();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 108;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 109; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LogStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterLogStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitLogStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogStatementContext logStatement() {
		LogStatementContext _localctx = new LogStatementContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_logStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; Match(T__2);
			State = 112; expression(0);
			State = 113; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PhaseContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(Combined1Parser.INTEGER, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public PhaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_phase; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterPhase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitPhase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPhase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PhaseContext phase() {
		PhaseContext _localctx = new PhaseContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_phase);
		try {
			State = 121;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 115; Match(T__4);
				State = 116; Match(INTEGER);
				State = 117; block();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 118; Match(T__4);
				State = 119; Match(INTEGER);
				State = 120; Match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseifBlockContext elseifBlock() {
			return GetRuleContext<ElseifBlockContext>(0);
		}
		public IfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterIfBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitIfBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockContext ifBlock() {
		IfBlockContext _localctx = new IfBlockContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_ifBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123; Match(T__5);
			State = 124; Match(T__6);
			State = 125; expression(0);
			State = 126; Match(T__7);
			State = 127; block();
			State = 130;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__8) {
				{
				State = 128; Match(T__8);
				State = 129; elseifBlock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseifBlockContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		public ElseifBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseifBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterElseifBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitElseifBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseifBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseifBlockContext elseifBlock() {
		ElseifBlockContext _localctx = new ElseifBlockContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_elseifBlock);
		try {
			State = 134;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 132; block();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 2);
				{
				State = 133; ifBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatUntilContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RepeatUntilContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatUntil; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterRepeatUntil(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitRepeatUntil(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatUntil(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatUntilContext repeatUntil() {
		RepeatUntilContext _localctx = new RepeatUntilContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_repeatUntil);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136; Match(T__9);
			State = 137; block();
			State = 138; Match(T__10);
			State = 139; Match(T__6);
			State = 140; expression(0);
			State = 141; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public StopContext stop() {
			return GetRuleContext<StopContext>(0);
		}
		public CancelContext cancel() {
			return GetRuleContext<CancelContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__15:
			case T__16:
			case T__17:
			case T__18:
			case T__19:
				{
				State = 143; declaration();
				}
				break;
			case T__6:
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__25:
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
			case T__31:
			case T__32:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
			case T__38:
			case T__39:
			case T__40:
			case T__41:
			case T__42:
			case T__43:
			case ID:
				{
				State = 144; assignment();
				}
				break;
			case T__12:
				{
				State = 145; stop();
				}
				break;
			case T__13:
				{
				State = 146; cancel();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 149; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(Combined1Parser.ID, 0); }
		public PieceTypeContext pieceType() {
			return GetRuleContext<PieceTypeContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151; type();
			State = 153;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__6) {
				{
				State = 152; pieceType();
				}
			}

			State = 155; Match(ID);
			State = 157;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__6) {
				{
				State = 156; parameterList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159; variable();
			State = 160; Match(T__11);
			State = 161; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopContext : ParserRuleContext {
		public StopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stop; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterStop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitStop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopContext stop() {
		StopContext _localctx = new StopContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_stop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163; Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CancelContext : ParserRuleContext {
		public CancelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cancel; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterCancel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitCancel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCancel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CancelContext cancel() {
		CancelContext _localctx = new CancelContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_cancel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165; Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(Combined1Parser.ID, 0); }
		public TileContext tile() {
			return GetRuleContext<TileContext>(0);
		}
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_variable);
		try {
			int _alt;
			State = 182;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__6:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 169;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case ID:
					{
					State = 167; Match(ID);
					}
					break;
				case T__6:
					{
					State = 168; tile();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 174;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 171; member();
						}
						} 
					}
					State = 176;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
				}
				}
				break;
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__25:
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
			case T__31:
			case T__32:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
			case T__38:
			case T__39:
			case T__40:
			case T__41:
			case T__42:
			case T__43:
				EnterOuterAlt(_localctx, 2);
				{
				State = 178;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 177; member();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 180;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PieceTypeContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(Combined1Parser.ID, 0); }
		public PieceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pieceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterPieceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitPieceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPieceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PieceTypeContext pieceType() {
		PieceTypeContext _localctx = new PieceTypeContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_pieceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184; Match(T__6);
			State = 185; Match(ID);
			State = 186; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_parameterList);
		int _la;
		try {
			State = 202;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 188; Match(T__6);
				State = 197;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__66 - 64)) | (1L << (T__67 - 64)) | (1L << (T__68 - 64)) | (1L << (T__69 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__83 - 64)) | (1L << (INTEGER - 64)) | (1L << (FLOAT - 64)) | (1L << (STRING - 64)) | (1L << (BOOL - 64)) | (1L << (NULL - 64)) | (1L << (ID - 64)))) != 0)) {
					{
					State = 189; expression(0);
					State = 194;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==T__14) {
						{
						{
						State = 190; Match(T__14);
						State = 191; expression(0);
						}
						}
						State = 196;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
				}

				State = 199; Match(T__7);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 200; Match(T__6);
				State = 201; Match(T__7);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberContext : ParserRuleContext {
		public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public ElementContext element() {
			return GetRuleContext<ElementContext>(0);
		}
		public MemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitMember(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberContext member() {
		MemberContext _localctx = new MemberContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_member);
		int _la;
		try {
			State = 215;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 207;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==T__20) {
					{
					State = 206; Match(T__20);
					}
				}

				State = 209; field();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 211;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==T__20) {
					{
					State = 210; Match(T__20);
					}
				}

				State = 213; collection();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 214; element();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_field);
		try {
			State = 236;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__21:
				EnterOuterAlt(_localctx, 1);
				{
				State = 217; Match(T__21);
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 2);
				{
				State = 218; Match(T__22);
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 3);
				{
				State = 219; Match(T__23);
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 4);
				{
				State = 220; Match(T__24);
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 5);
				{
				State = 221; Match(T__25);
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 6);
				{
				State = 222; Match(T__26);
				}
				break;
			case T__27:
				EnterOuterAlt(_localctx, 7);
				{
				State = 223; Match(T__27);
				}
				break;
			case T__28:
				EnterOuterAlt(_localctx, 8);
				{
				State = 224; Match(T__28);
				}
				break;
			case T__29:
				EnterOuterAlt(_localctx, 9);
				{
				State = 225; Match(T__29);
				}
				break;
			case T__30:
				EnterOuterAlt(_localctx, 10);
				{
				State = 226; Match(T__30);
				}
				break;
			case T__31:
				EnterOuterAlt(_localctx, 11);
				{
				State = 227; Match(T__31);
				}
				break;
			case T__32:
				EnterOuterAlt(_localctx, 12);
				{
				State = 228; Match(T__32);
				}
				break;
			case T__33:
				EnterOuterAlt(_localctx, 13);
				{
				State = 229; Match(T__33);
				}
				break;
			case T__34:
				EnterOuterAlt(_localctx, 14);
				{
				State = 230; Match(T__34);
				}
				break;
			case T__35:
				EnterOuterAlt(_localctx, 15);
				{
				State = 231; Match(T__35);
				}
				break;
			case T__36:
				EnterOuterAlt(_localctx, 16);
				{
				State = 232; Match(T__36);
				}
				break;
			case T__37:
				EnterOuterAlt(_localctx, 17);
				{
				State = 233; Match(T__37);
				}
				break;
			case T__38:
				EnterOuterAlt(_localctx, 18);
				{
				State = 234; Match(T__38);
				State = 235; parameterList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TileContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public TileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tile; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterTile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitTile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TileContext tile() {
		TileContext _localctx = new TileContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_tile);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238; Match(T__6);
			State = 239; expression(0);
			State = 240; Match(T__14);
			State = 241; expression(0);
			State = 242; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionContext : ParserRuleContext {
		public CollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterCollection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitCollection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionContext collection() {
		CollectionContext _localctx = new CollectionContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_collection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246; Match(T__43);
			State = 255;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__66 - 64)) | (1L << (T__67 - 64)) | (1L << (T__68 - 64)) | (1L << (T__69 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__83 - 64)) | (1L << (INTEGER - 64)) | (1L << (FLOAT - 64)) | (1L << (STRING - 64)) | (1L << (BOOL - 64)) | (1L << (NULL - 64)) | (1L << (ID - 64)))) != 0)) {
				{
				State = 247; expression(0);
				State = 252;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__14) {
					{
					{
					State = 248; Match(T__14);
					State = 249; expression(0);
					}
					}
					State = 254;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 257; Match(T__44);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259; Match(T__43);
			State = 260; expression(0);
			State = 261; Match(T__44);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		public FunctionBlockContext functionBlock() {
			return GetRuleContext<FunctionBlockContext>(0);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterFunctionBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitFunctionBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_functionBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263; variable();
			State = 264; Match(T__20);
			State = 265; functionName();
			State = 266; functionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBlockContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public FunctionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterFunctionBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitFunctionBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBlockContext functionBlock() {
		FunctionBlockContext _localctx = new FunctionBlockContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_functionBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268; Match(T__6);
			State = 270;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19))) != 0)) {
				{
				State = 269; declaration();
				}
			}

			State = 272; Match(T__7);
			State = 273; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
			case 1:
				{
				State = 275; variable();
				State = 276; Match(T__20);
				}
				break;
			}
			State = 280; functionName();
			State = 281; parameterList();
			State = 283;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,26,_ctx) ) {
			case 1:
				{
				State = 282; Match(T__3);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(Combined1Parser.ID, 0); }
		public FunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterFunctionName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitFunctionName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameContext functionName() {
		FunctionNameContext _localctx = new FunctionNameContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_functionName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			_la = _input.La(1);
			if ( !(((((_la - 46)) & ~0x3f) == 0 && ((1L << (_la - 46)) & ((1L << (T__45 - 46)) | (1L << (T__46 - 46)) | (1L << (T__47 - 46)) | (1L << (T__48 - 46)) | (1L << (T__49 - 46)) | (1L << (T__50 - 46)) | (1L << (T__51 - 46)) | (1L << (T__52 - 46)) | (1L << (T__53 - 46)) | (1L << (T__54 - 46)) | (1L << (T__55 - 46)) | (1L << (ID - 46)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstExpressionContext : ExpressionContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterConstExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitConstExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarExpressionContext : ExpressionContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public VarExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterVarExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitVarExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ListExpressionContext : ExpressionContext {
		public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public ListExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterListExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitListExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncCallExpressionContext : ExpressionContext {
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FuncCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterFuncCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitFuncCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParentExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterParentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitParentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AbsExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AbsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterAbsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitAbsExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultOpContext multOp() {
			return GetRuleContext<MultOpContext>(0);
		}
		public MultExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterMultExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitMultExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AddOpContext addOp() {
			return GetRuleContext<AddOpContext>(0);
		}
		public AddExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterAddExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitAddExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CompareOpContext compareOp() {
			return GetRuleContext<CompareOpContext>(0);
		}
		public CompExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterCompExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitCompExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BoolOpContext boolOp() {
			return GetRuleContext<BoolOpContext>(0);
		}
		public BoolExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterBoolExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitBoolExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NegExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterNegExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitNegExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InputExpressionContext : ExpressionContext {
		public InputContext input() {
			return GetRuleContext<InputContext>(0);
		}
		public InputExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterInputExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitInputExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TurnStagesExpContext : ExpressionContext {
		public TurnStagesContext turnStages() {
			return GetRuleContext<TurnStagesContext>(0);
		}
		public TurnStagesExpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterTurnStagesExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitTurnStagesExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTurnStagesExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PMoveTypeExpContext : ExpressionContext {
		public PieceMoveTypesContext pieceMoveTypes() {
			return GetRuleContext<PieceMoveTypesContext>(0);
		}
		public PMoveTypeExpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterPMoveTypeExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitPMoveTypeExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPMoveTypeExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NeighborsExpContext : ExpressionContext {
		public NeighborsContext neighbors() {
			return GetRuleContext<NeighborsContext>(0);
		}
		public NeighborsExpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterNeighborsExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitNeighborsExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNeighborsExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,27,_ctx) ) {
			case 1:
				{
				_localctx = new ConstExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 288; constant();
				}
				break;

			case 2:
				{
				_localctx = new VarExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 289; variable();
				}
				break;

			case 3:
				{
				_localctx = new ListExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 290; list();
				}
				break;

			case 4:
				{
				_localctx = new FuncCallExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 291; functionCall();
				}
				break;

			case 5:
				{
				_localctx = new ParentExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 292; Match(T__6);
				State = 293; expression(0);
				State = 294; Match(T__7);
				}
				break;

			case 6:
				{
				_localctx = new NotExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 296; Match(T__56);
				State = 297; expression(11);
				}
				break;

			case 7:
				{
				_localctx = new AbsExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 298; Match(T__57);
				State = 299; expression(0);
				State = 300; Match(T__57);
				}
				break;

			case 8:
				{
				_localctx = new NegExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 302; Match(T__58);
				State = 303; expression(5);
				}
				break;

			case 9:
				{
				_localctx = new InputExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 304; input();
				}
				break;

			case 10:
				{
				_localctx = new TurnStagesExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 305; Match(T__59);
				State = 306; turnStages();
				State = 307; Match(T__60);
				}
				break;

			case 11:
				{
				_localctx = new PMoveTypeExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 309; pieceMoveTypes();
				}
				break;

			case 12:
				{
				_localctx = new NeighborsExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 310; neighbors();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 331;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,29,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 329;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
					case 1:
						{
						_localctx = new MultExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 313;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 314; multOp();
						State = 315; expression(10);
						}
						break;

					case 2:
						{
						_localctx = new AddExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 317;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 318; addOp();
						State = 319; expression(9);
						}
						break;

					case 3:
						{
						_localctx = new CompExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 321;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 322; compareOp();
						State = 323; expression(8);
						}
						break;

					case 4:
						{
						_localctx = new BoolExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 325;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 326; boolOp();
						State = 327; expression(7);
						}
						break;
					}
					} 
				}
				State = 333;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,29,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TurnStagesContext : ParserRuleContext {
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public TurnStagesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_turnStages; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterTurnStages(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitTurnStages(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTurnStages(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TurnStagesContext turnStages() {
		TurnStagesContext _localctx = new TurnStagesContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_turnStages);
		try {
			State = 339;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__61:
				EnterOuterAlt(_localctx, 1);
				{
				State = 334; Match(T__61);
				State = 335; parameterList();
				}
				break;
			case T__62:
				EnterOuterAlt(_localctx, 2);
				{
				State = 336; Match(T__62);
				State = 337; parameterList();
				}
				break;
			case T__6:
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__25:
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
			case T__31:
			case T__32:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
			case T__38:
			case T__39:
			case T__40:
			case T__41:
			case T__42:
			case T__43:
			case T__45:
			case T__46:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 338; functionCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputContext : ParserRuleContext {
		public InputTypesContext inputTypes() {
			return GetRuleContext<InputTypesContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterInput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitInput(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_input);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341; Match(T__63);
			State = 342; Match(T__20);
			State = 343; inputTypes();
			State = 344; Match(T__6);
			State = 345; expression(0);
			State = 346; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputTypesContext : ParserRuleContext {
		public InputTypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputTypes; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterInputTypes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitInputTypes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputTypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputTypesContext inputTypes() {
		InputTypesContext _localctx = new InputTypesContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_inputTypes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348;
			_la = _input.La(1);
			if ( !(_la==T__64 || _la==T__65) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PieceMoveTypesContext : ParserRuleContext {
		public PieceMoveTypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pieceMoveTypes; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterPieceMoveTypes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitPieceMoveTypes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPieceMoveTypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PieceMoveTypesContext pieceMoveTypes() {
		PieceMoveTypesContext _localctx = new PieceMoveTypesContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_pieceMoveTypes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350;
			_la = _input.La(1);
			if ( !(((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (T__66 - 67)) | (1L << (T__67 - 67)) | (1L << (T__68 - 67)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NeighborsContext : ParserRuleContext {
		public NeighborsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_neighbors; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterNeighbors(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitNeighbors(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNeighbors(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NeighborsContext neighbors() {
		NeighborsContext _localctx = new NeighborsContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_neighbors);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352;
			_la = _input.La(1);
			if ( !(((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (T__69 - 70)) | (1L << (T__70 - 70)) | (1L << (T__71 - 70)) | (1L << (T__72 - 70)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultOpContext : ParserRuleContext {
		public MultOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterMultOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitMultOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultOpContext multOp() {
		MultOpContext _localctx = new MultOpContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_multOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354;
			_la = _input.La(1);
			if ( !(((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (T__73 - 74)) | (1L << (T__74 - 74)) | (1L << (T__75 - 74)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddOpContext : ParserRuleContext {
		public AddOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterAddOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitAddOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddOpContext addOp() {
		AddOpContext _localctx = new AddOpContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_addOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356;
			_la = _input.La(1);
			if ( !(_la==T__58 || _la==T__76) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareOpContext : ParserRuleContext {
		public CompareOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterCompareOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitCompareOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareOpContext compareOp() {
		CompareOpContext _localctx = new CompareOpContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_compareOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			_la = _input.La(1);
			if ( !(((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & ((1L << (T__59 - 60)) | (1L << (T__60 - 60)) | (1L << (T__77 - 60)) | (1L << (T__78 - 60)) | (1L << (T__79 - 60)) | (1L << (T__80 - 60)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolOpContext : ParserRuleContext {
		public BoolOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterBoolOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitBoolOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolOpContext boolOp() {
		BoolOpContext _localctx = new BoolOpContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_boolOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360;
			_la = _input.La(1);
			if ( !(_la==T__81 || _la==T__82) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(Combined1Parser.INTEGER, 0); }
		public ITerminalNode FLOAT() { return GetToken(Combined1Parser.FLOAT, 0); }
		public ITerminalNode BOOL() { return GetToken(Combined1Parser.BOOL, 0); }
		public ITerminalNode STRING() { return GetToken(Combined1Parser.STRING, 0); }
		public ITerminalNode NULL() { return GetToken(Combined1Parser.NULL, 0); }
		public ColorContext color() {
			return GetRuleContext<ColorContext>(0);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_constant);
		try {
			State = 368;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 362; Match(INTEGER);
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 363; Match(FLOAT);
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 364; Match(BOOL);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 365; Match(STRING);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 366; Match(NULL);
				}
				break;
			case T__83:
				EnterOuterAlt(_localctx, 6);
				{
				State = 367; color();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColorContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(Combined1Parser.STRING, 0); }
		public ColorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_color; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.EnterColor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICombined1Listener typedListener = listener as ICombined1Listener;
			if (typedListener != null) typedListener.ExitColor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICombined1Visitor<TResult> typedVisitor = visitor as ICombined1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColorContext color() {
		ColorContext _localctx = new ColorContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_color);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370; Match(T__83);
			State = 371; Match(T__6);
			State = 372; Match(STRING);
			State = 373; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 28: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 9);

		case 1: return Precpred(_ctx, 8);

		case 2: return Precpred(_ctx, 7);

		case 3: return Precpred(_ctx, 6);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3_\x17A\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x3\x2"+
		"\x3\x2\a\x2U\n\x2\f\x2\xE\x2X\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x66\n\x4\x3\x5\x3\x5\x3\x5"+
		"\a\x5k\n\x5\f\x5\xE\x5n\v\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a|\n\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b"+
		"\x5\b\x85\n\b\x3\t\x3\t\x5\t\x89\n\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3"+
		"\n\x3\v\x3\v\x3\v\x3\v\x5\v\x96\n\v\x3\v\x3\v\x3\f\x3\f\x5\f\x9C\n\f\x3"+
		"\f\x3\f\x5\f\xA0\n\f\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10"+
		"\x3\x10\x5\x10\xAC\n\x10\x3\x10\a\x10\xAF\n\x10\f\x10\xE\x10\xB2\v\x10"+
		"\x3\x10\x6\x10\xB5\n\x10\r\x10\xE\x10\xB6\x5\x10\xB9\n\x10\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\a\x12\xC3\n\x12\f\x12\xE\x12"+
		"\xC6\v\x12\x5\x12\xC8\n\x12\x3\x12\x3\x12\x3\x12\x5\x12\xCD\n\x12\x3\x13"+
		"\x3\x13\x3\x14\x5\x14\xD2\n\x14\x3\x14\x3\x14\x5\x14\xD6\n\x14\x3\x14"+
		"\x3\x14\x5\x14\xDA\n\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3"+
		"\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3"+
		"\x15\x3\x15\x3\x15\x5\x15\xEF\n\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16"+
		"\x3\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18\a\x18\xFD\n\x18\f\x18"+
		"\xE\x18\x100\v\x18\x5\x18\x102\n\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19"+
		"\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x5\x1B\x111\n"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x119\n\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x5\x1C\x11E\n\x1C\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3"+
		"\x1E\x5\x1E\x13A\n\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\a\x1E"+
		"\x14C\n\x1E\f\x1E\xE\x1E\x14F\v\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x5\x1F\x156\n\x1F\x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3!\x3!\x3\"\x3\"\x3#\x3"+
		"#\x3$\x3$\x3%\x3%\x3&\x3&\x3\'\x3\'\x3(\x3(\x3(\x3(\x3(\x3(\x5(\x173\n"+
		"(\x3)\x3)\x3)\x3)\x3)\x3)\x2\x2\x3:*\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2"+
		"\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2"+
		"$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2"+
		"@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2\x2\r\x3\x2WX\x3\x2\x12\x16"+
		"\x3\x2*-\x4\x2\x30:^^\x3\x2\x43\x44\x3\x2\x45G\x3\x2HK\x3\x2LN\x4\x2="+
		"=OO\x4\x2>?PS\x3\x2TU\x19B\x2V\x3\x2\x2\x2\x4[\x3\x2\x2\x2\x6\x65\x3\x2"+
		"\x2\x2\bg\x3\x2\x2\x2\nq\x3\x2\x2\x2\f{\x3\x2\x2\x2\xE}\x3\x2\x2\x2\x10"+
		"\x88\x3\x2\x2\x2\x12\x8A\x3\x2\x2\x2\x14\x95\x3\x2\x2\x2\x16\x99\x3\x2"+
		"\x2\x2\x18\xA1\x3\x2\x2\x2\x1A\xA5\x3\x2\x2\x2\x1C\xA7\x3\x2\x2\x2\x1E"+
		"\xB8\x3\x2\x2\x2 \xBA\x3\x2\x2\x2\"\xCC\x3\x2\x2\x2$\xCE\x3\x2\x2\x2&"+
		"\xD9\x3\x2\x2\x2(\xEE\x3\x2\x2\x2*\xF0\x3\x2\x2\x2,\xF6\x3\x2\x2\x2.\xF8"+
		"\x3\x2\x2\x2\x30\x105\x3\x2\x2\x2\x32\x109\x3\x2\x2\x2\x34\x10E\x3\x2"+
		"\x2\x2\x36\x118\x3\x2\x2\x2\x38\x11F\x3\x2\x2\x2:\x139\x3\x2\x2\x2<\x155"+
		"\x3\x2\x2\x2>\x157\x3\x2\x2\x2@\x15E\x3\x2\x2\x2\x42\x160\x3\x2\x2\x2"+
		"\x44\x162\x3\x2\x2\x2\x46\x164\x3\x2\x2\x2H\x166\x3\x2\x2\x2J\x168\x3"+
		"\x2\x2\x2L\x16A\x3\x2\x2\x2N\x172\x3\x2\x2\x2P\x174\x3\x2\x2\x2RU\x5\x6"+
		"\x4\x2SU\x5\x4\x3\x2TR\x3\x2\x2\x2TS\x3\x2\x2\x2UX\x3\x2\x2\x2VT\x3\x2"+
		"\x2\x2VW\x3\x2\x2\x2WY\x3\x2\x2\x2XV\x3\x2\x2\x2YZ\a\x2\x2\x3Z\x3\x3\x2"+
		"\x2\x2[\\\t\x2\x2\x2\\\x5\x3\x2\x2\x2]\x66\x5\x14\v\x2^\x66\x5\f\a\x2"+
		"_\x66\x5\xE\b\x2`\x66\x5\x12\n\x2\x61\x66\x5\x32\x1A\x2\x62\x66\x5\x36"+
		"\x1C\x2\x63\x66\x5\b\x5\x2\x64\x66\x5\n\x6\x2\x65]\x3\x2\x2\x2\x65^\x3"+
		"\x2\x2\x2\x65_\x3\x2\x2\x2\x65`\x3\x2\x2\x2\x65\x61\x3\x2\x2\x2\x65\x62"+
		"\x3\x2\x2\x2\x65\x63\x3\x2\x2\x2\x65\x64\x3\x2\x2\x2\x66\a\x3\x2\x2\x2"+
		"gl\a\x3\x2\x2hk\x5\x6\x4\x2ik\x5\x4\x3\x2jh\x3\x2\x2\x2ji\x3\x2\x2\x2"+
		"kn\x3\x2\x2\x2lj\x3\x2\x2\x2lm\x3\x2\x2\x2mo\x3\x2\x2\x2nl\x3\x2\x2\x2"+
		"op\a\x4\x2\x2p\t\x3\x2\x2\x2qr\a\x5\x2\x2rs\x5:\x1E\x2st\a\x6\x2\x2t\v"+
		"\x3\x2\x2\x2uv\a\a\x2\x2vw\aY\x2\x2w|\x5\b\x5\x2xy\a\a\x2\x2yz\aY\x2\x2"+
		"z|\a\x6\x2\x2{u\x3\x2\x2\x2{x\x3\x2\x2\x2|\r\x3\x2\x2\x2}~\a\b\x2\x2~"+
		"\x7F\a\t\x2\x2\x7F\x80\x5:\x1E\x2\x80\x81\a\n\x2\x2\x81\x84\x5\b\x5\x2"+
		"\x82\x83\a\v\x2\x2\x83\x85\x5\x10\t\x2\x84\x82\x3\x2\x2\x2\x84\x85\x3"+
		"\x2\x2\x2\x85\xF\x3\x2\x2\x2\x86\x89\x5\b\x5\x2\x87\x89\x5\xE\b\x2\x88"+
		"\x86\x3\x2\x2\x2\x88\x87\x3\x2\x2\x2\x89\x11\x3\x2\x2\x2\x8A\x8B\a\f\x2"+
		"\x2\x8B\x8C\x5\b\x5\x2\x8C\x8D\a\r\x2\x2\x8D\x8E\a\t\x2\x2\x8E\x8F\x5"+
		":\x1E\x2\x8F\x90\a\n\x2\x2\x90\x13\x3\x2\x2\x2\x91\x96\x5\x16\f\x2\x92"+
		"\x96\x5\x18\r\x2\x93\x96\x5\x1A\xE\x2\x94\x96\x5\x1C\xF\x2\x95\x91\x3"+
		"\x2\x2\x2\x95\x92\x3\x2\x2\x2\x95\x93\x3\x2\x2\x2\x95\x94\x3\x2\x2\x2"+
		"\x96\x97\x3\x2\x2\x2\x97\x98\a\x6\x2\x2\x98\x15\x3\x2\x2\x2\x99\x9B\x5"+
		"$\x13\x2\x9A\x9C\x5 \x11\x2\x9B\x9A\x3\x2\x2\x2\x9B\x9C\x3\x2\x2\x2\x9C"+
		"\x9D\x3\x2\x2\x2\x9D\x9F\a^\x2\x2\x9E\xA0\x5\"\x12\x2\x9F\x9E\x3\x2\x2"+
		"\x2\x9F\xA0\x3\x2\x2\x2\xA0\x17\x3\x2\x2\x2\xA1\xA2\x5\x1E\x10\x2\xA2"+
		"\xA3\a\xE\x2\x2\xA3\xA4\x5:\x1E\x2\xA4\x19\x3\x2\x2\x2\xA5\xA6\a\xF\x2"+
		"\x2\xA6\x1B\x3\x2\x2\x2\xA7\xA8\a\x10\x2\x2\xA8\x1D\x3\x2\x2\x2\xA9\xAC"+
		"\a^\x2\x2\xAA\xAC\x5*\x16\x2\xAB\xA9\x3\x2\x2\x2\xAB\xAA\x3\x2\x2\x2\xAC"+
		"\xB0\x3\x2\x2\x2\xAD\xAF\x5&\x14\x2\xAE\xAD\x3\x2\x2\x2\xAF\xB2\x3\x2"+
		"\x2\x2\xB0\xAE\x3\x2\x2\x2\xB0\xB1\x3\x2\x2\x2\xB1\xB9\x3\x2\x2\x2\xB2"+
		"\xB0\x3\x2\x2\x2\xB3\xB5\x5&\x14\x2\xB4\xB3\x3\x2\x2\x2\xB5\xB6\x3\x2"+
		"\x2\x2\xB6\xB4\x3\x2\x2\x2\xB6\xB7\x3\x2\x2\x2\xB7\xB9\x3\x2\x2\x2\xB8"+
		"\xAB\x3\x2\x2\x2\xB8\xB4\x3\x2\x2\x2\xB9\x1F\x3\x2\x2\x2\xBA\xBB\a\t\x2"+
		"\x2\xBB\xBC\a^\x2\x2\xBC\xBD\a\n\x2\x2\xBD!\x3\x2\x2\x2\xBE\xC7\a\t\x2"+
		"\x2\xBF\xC4\x5:\x1E\x2\xC0\xC1\a\x11\x2\x2\xC1\xC3\x5:\x1E\x2\xC2\xC0"+
		"\x3\x2\x2\x2\xC3\xC6\x3\x2\x2\x2\xC4\xC2\x3\x2\x2\x2\xC4\xC5\x3\x2\x2"+
		"\x2\xC5\xC8\x3\x2\x2\x2\xC6\xC4\x3\x2\x2\x2\xC7\xBF\x3\x2\x2\x2\xC7\xC8"+
		"\x3\x2\x2\x2\xC8\xC9\x3\x2\x2\x2\xC9\xCD\a\n\x2\x2\xCA\xCB\a\t\x2\x2\xCB"+
		"\xCD\a\n\x2\x2\xCC\xBE\x3\x2\x2\x2\xCC\xCA\x3\x2\x2\x2\xCD#\x3\x2\x2\x2"+
		"\xCE\xCF\t\x3\x2\x2\xCF%\x3\x2\x2\x2\xD0\xD2\a\x17\x2\x2\xD1\xD0\x3\x2"+
		"\x2\x2\xD1\xD2\x3\x2\x2\x2\xD2\xD3\x3\x2\x2\x2\xD3\xDA\x5(\x15\x2\xD4"+
		"\xD6\a\x17\x2\x2\xD5\xD4\x3\x2\x2\x2\xD5\xD6\x3\x2\x2\x2\xD6\xD7\x3\x2"+
		"\x2\x2\xD7\xDA\x5,\x17\x2\xD8\xDA\x5\x30\x19\x2\xD9\xD1\x3\x2\x2\x2\xD9"+
		"\xD5\x3\x2\x2\x2\xD9\xD8\x3\x2\x2\x2\xDA\'\x3\x2\x2\x2\xDB\xEF\a\x18\x2"+
		"\x2\xDC\xEF\a\x19\x2\x2\xDD\xEF\a\x1A\x2\x2\xDE\xEF\a\x1B\x2\x2\xDF\xEF"+
		"\a\x1C\x2\x2\xE0\xEF\a\x1D\x2\x2\xE1\xEF\a\x1E\x2\x2\xE2\xEF\a\x1F\x2"+
		"\x2\xE3\xEF\a \x2\x2\xE4\xEF\a!\x2\x2\xE5\xEF\a\"\x2\x2\xE6\xEF\a#\x2"+
		"\x2\xE7\xEF\a$\x2\x2\xE8\xEF\a%\x2\x2\xE9\xEF\a&\x2\x2\xEA\xEF\a\'\x2"+
		"\x2\xEB\xEF\a(\x2\x2\xEC\xED\a)\x2\x2\xED\xEF\x5\"\x12\x2\xEE\xDB\x3\x2"+
		"\x2\x2\xEE\xDC\x3\x2\x2\x2\xEE\xDD\x3\x2\x2\x2\xEE\xDE\x3\x2\x2\x2\xEE"+
		"\xDF\x3\x2\x2\x2\xEE\xE0\x3\x2\x2\x2\xEE\xE1\x3\x2\x2\x2\xEE\xE2\x3\x2"+
		"\x2\x2\xEE\xE3\x3\x2\x2\x2\xEE\xE4\x3\x2\x2\x2\xEE\xE5\x3\x2\x2\x2\xEE"+
		"\xE6\x3\x2\x2\x2\xEE\xE7\x3\x2\x2\x2\xEE\xE8\x3\x2\x2\x2\xEE\xE9\x3\x2"+
		"\x2\x2\xEE\xEA\x3\x2\x2\x2\xEE\xEB\x3\x2\x2\x2\xEE\xEC\x3\x2\x2\x2\xEF"+
		")\x3\x2\x2\x2\xF0\xF1\a\t\x2\x2\xF1\xF2\x5:\x1E\x2\xF2\xF3\a\x11\x2\x2"+
		"\xF3\xF4\x5:\x1E\x2\xF4\xF5\a\n\x2\x2\xF5+\x3\x2\x2\x2\xF6\xF7\t\x4\x2"+
		"\x2\xF7-\x3\x2\x2\x2\xF8\x101\a.\x2\x2\xF9\xFE\x5:\x1E\x2\xFA\xFB\a\x11"+
		"\x2\x2\xFB\xFD\x5:\x1E\x2\xFC\xFA\x3\x2\x2\x2\xFD\x100\x3\x2\x2\x2\xFE"+
		"\xFC\x3\x2\x2\x2\xFE\xFF\x3\x2\x2\x2\xFF\x102\x3\x2\x2\x2\x100\xFE\x3"+
		"\x2\x2\x2\x101\xF9\x3\x2\x2\x2\x101\x102\x3\x2\x2\x2\x102\x103\x3\x2\x2"+
		"\x2\x103\x104\a/\x2\x2\x104/\x3\x2\x2\x2\x105\x106\a.\x2\x2\x106\x107"+
		"\x5:\x1E\x2\x107\x108\a/\x2\x2\x108\x31\x3\x2\x2\x2\x109\x10A\x5\x1E\x10"+
		"\x2\x10A\x10B\a\x17\x2\x2\x10B\x10C\x5\x38\x1D\x2\x10C\x10D\x5\x34\x1B"+
		"\x2\x10D\x33\x3\x2\x2\x2\x10E\x110\a\t\x2\x2\x10F\x111\x5\x16\f\x2\x110"+
		"\x10F\x3\x2\x2\x2\x110\x111\x3\x2\x2\x2\x111\x112\x3\x2\x2\x2\x112\x113"+
		"\a\n\x2\x2\x113\x114\x5\b\x5\x2\x114\x35\x3\x2\x2\x2\x115\x116\x5\x1E"+
		"\x10\x2\x116\x117\a\x17\x2\x2\x117\x119\x3\x2\x2\x2\x118\x115\x3\x2\x2"+
		"\x2\x118\x119\x3\x2\x2\x2\x119\x11A\x3\x2\x2\x2\x11A\x11B\x5\x38\x1D\x2"+
		"\x11B\x11D\x5\"\x12\x2\x11C\x11E\a\x6\x2\x2\x11D\x11C\x3\x2\x2\x2\x11D"+
		"\x11E\x3\x2\x2\x2\x11E\x37\x3\x2\x2\x2\x11F\x120\t\x5\x2\x2\x120\x39\x3"+
		"\x2\x2\x2\x121\x122\b\x1E\x1\x2\x122\x13A\x5N(\x2\x123\x13A\x5\x1E\x10"+
		"\x2\x124\x13A\x5.\x18\x2\x125\x13A\x5\x36\x1C\x2\x126\x127\a\t\x2\x2\x127"+
		"\x128\x5:\x1E\x2\x128\x129\a\n\x2\x2\x129\x13A\x3\x2\x2\x2\x12A\x12B\a"+
		";\x2\x2\x12B\x13A\x5:\x1E\r\x12C\x12D\a<\x2\x2\x12D\x12E\x5:\x1E\x2\x12E"+
		"\x12F\a<\x2\x2\x12F\x13A\x3\x2\x2\x2\x130\x131\a=\x2\x2\x131\x13A\x5:"+
		"\x1E\a\x132\x13A\x5> \x2\x133\x134\a>\x2\x2\x134\x135\x5<\x1F\x2\x135"+
		"\x136\a?\x2\x2\x136\x13A\x3\x2\x2\x2\x137\x13A\x5\x42\"\x2\x138\x13A\x5"+
		"\x44#\x2\x139\x121\x3\x2\x2\x2\x139\x123\x3\x2\x2\x2\x139\x124\x3\x2\x2"+
		"\x2\x139\x125\x3\x2\x2\x2\x139\x126\x3\x2\x2\x2\x139\x12A\x3\x2\x2\x2"+
		"\x139\x12C\x3\x2\x2\x2\x139\x130\x3\x2\x2\x2\x139\x132\x3\x2\x2\x2\x139"+
		"\x133\x3\x2\x2\x2\x139\x137\x3\x2\x2\x2\x139\x138\x3\x2\x2\x2\x13A\x14D"+
		"\x3\x2\x2\x2\x13B\x13C\f\v\x2\x2\x13C\x13D\x5\x46$\x2\x13D\x13E\x5:\x1E"+
		"\f\x13E\x14C\x3\x2\x2\x2\x13F\x140\f\n\x2\x2\x140\x141\x5H%\x2\x141\x142"+
		"\x5:\x1E\v\x142\x14C\x3\x2\x2\x2\x143\x144\f\t\x2\x2\x144\x145\x5J&\x2"+
		"\x145\x146\x5:\x1E\n\x146\x14C\x3\x2\x2\x2\x147\x148\f\b\x2\x2\x148\x149"+
		"\x5L\'\x2\x149\x14A\x5:\x1E\t\x14A\x14C\x3\x2\x2\x2\x14B\x13B\x3\x2\x2"+
		"\x2\x14B\x13F\x3\x2\x2\x2\x14B\x143\x3\x2\x2\x2\x14B\x147\x3\x2\x2\x2"+
		"\x14C\x14F\x3\x2\x2\x2\x14D\x14B\x3\x2\x2\x2\x14D\x14E\x3\x2\x2\x2\x14E"+
		";\x3\x2\x2\x2\x14F\x14D\x3\x2\x2\x2\x150\x151\a@\x2\x2\x151\x156\x5\""+
		"\x12\x2\x152\x153\a\x41\x2\x2\x153\x156\x5\"\x12\x2\x154\x156\x5\x36\x1C"+
		"\x2\x155\x150\x3\x2\x2\x2\x155\x152\x3\x2\x2\x2\x155\x154\x3\x2\x2\x2"+
		"\x156=\x3\x2\x2\x2\x157\x158\a\x42\x2\x2\x158\x159\a\x17\x2\x2\x159\x15A"+
		"\x5@!\x2\x15A\x15B\a\t\x2\x2\x15B\x15C\x5:\x1E\x2\x15C\x15D\a\n\x2\x2"+
		"\x15D?\x3\x2\x2\x2\x15E\x15F\t\x6\x2\x2\x15F\x41\x3\x2\x2\x2\x160\x161"+
		"\t\a\x2\x2\x161\x43\x3\x2\x2\x2\x162\x163\t\b\x2\x2\x163\x45\x3\x2\x2"+
		"\x2\x164\x165\t\t\x2\x2\x165G\x3\x2\x2\x2\x166\x167\t\n\x2\x2\x167I\x3"+
		"\x2\x2\x2\x168\x169\t\v\x2\x2\x169K\x3\x2\x2\x2\x16A\x16B\t\f\x2\x2\x16B"+
		"M\x3\x2\x2\x2\x16C\x173\aY\x2\x2\x16D\x173\aZ\x2\x2\x16E\x173\a\\\x2\x2"+
		"\x16F\x173\a[\x2\x2\x170\x173\a]\x2\x2\x171\x173\x5P)\x2\x172\x16C\x3"+
		"\x2\x2\x2\x172\x16D\x3\x2\x2\x2\x172\x16E\x3\x2\x2\x2\x172\x16F\x3\x2"+
		"\x2\x2\x172\x170\x3\x2\x2\x2\x172\x171\x3\x2\x2\x2\x173O\x3\x2\x2\x2\x174"+
		"\x175\aV\x2\x2\x175\x176\a\t\x2\x2\x176\x177\a[\x2\x2\x177\x178\a\n\x2"+
		"\x2\x178Q\x3\x2\x2\x2\"TV\x65jl{\x84\x88\x95\x9B\x9F\xAB\xB0\xB6\xB8\xC4"+
		"\xC7\xCC\xD1\xD5\xD9\xEE\xFE\x101\x110\x118\x11D\x139\x14B\x14D\x155\x172";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Language
