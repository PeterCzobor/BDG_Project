Dice dice(1,2,3,4,5,6);
Player player1("Player1");
Player player2("Player2");

Piece piece1(player1,0,0);
piece1.color= Color("Blue");

piece1.route=
[(0,0),(1,0),(2,0),(3,0),(4,0),(5,0),(6,0),(7,0),(8,0),(9,0),(9,1),(8,1),(7,1),(6,1),(5,1),(4,1),(3,1),(2,1),(1,1),(0,1),
(0,2),(1,2),(2,2),(3,2),(4,2),(5,2),(6,2),(7,2),(8,2),(9,2),(9,3),(8,3),(7,3),(6,3),(5,3),(4,3),(3,3),(2,3),(1,3),(0,3),
(0,4),(1,4),(2,4),(3,4),(4,4),(5,4),(6,4),(7,4),(8,4),(9,4),(9,5),(8,5),(7,5),(6,5),(5,5),(4,5),(3,5),(2,5),(1,5),(0,5),
(0,6),(1,6),(2,6),(3,6),(4,6),(5,6),(6,6),(7,6),(8,6),(9,6),(9,7),(8,7),(7,7),(6,7),(5,7),(4,7),(3,7),(2,7),(1,7),(0,7),
(0,8),(1,8),(2,8),(3,8),(4,8),(5,8),(6,8),(7,8),(8,8),(9,8),(9,9),(8,9),(7,9),(6,9),(5,9),(4,9),(3,9),(2,9),(1,9),(0,9)];

player1.Turn(<dice.Roll()>, <SelectPiece(piece)>, <piece.Rule()>);

Piece piece2(player2,0,0);
piece2.color= Color("Green");

piece2.route=
[(0,0),(1,0),(2,0),(3,0),(4,0),(5,0),(6,0),(7,0),(8,0),(9,0),(9,1),(8,1),(7,1),(6,1),(5,1),(4,1),(3,1),(2,1),(1,1),(0,1),
(0,2),(1,2),(2,2),(3,2),(4,2),(5,2),(6,2),(7,2),(8,2),(9,2),(9,3),(8,3),(7,3),(6,3),(5,3),(4,3),(3,3),(2,3),(1,3),(0,3),
(0,4),(1,4),(2,4),(3,4),(4,4),(5,4),(6,4),(7,4),(8,4),(9,4),(9,5),(8,5),(7,5),(6,5),(5,5),(4,5),(3,5),(2,5),(1,5),(0,5),
(0,6),(1,6),(2,6),(3,6),(4,6),(5,6),(6,6),(7,6),(8,6),(9,6),(9,7),(8,7),(7,7),(6,7),(5,7),(4,7),(3,7),(2,7),(1,7),(0,7),
(0,8),(1,8),(2,8),(3,8),(4,8),(5,8),(6,8),(7,8),(8,8),(9,8),(9,9),(8,9),(7,9),(6,9),(5,9),(4,9),(3,9),(2,9),(1,9),(0,9)];

player2.Turn(<dice.Roll()>, <SelectPiece(piece)>, <piece.Rule()>);

Teleports = 
[[1, 37],[3, 13],[7, 29],[20, 41],[27, 75],
[31, 9],[35, 6],[47, 25],[49, 66],[61, 17],
[70, 91],[79, 98],[87, 23],[94, 55],[96, 77]];

players.all.pieces.all.Rule()
{
	if(routePosition+dice.value>route.count-1)
	{ 
		StepBackAmount=routePosition+dice.value-(route.count-1);
		MoveTo(route.count-1, Step);
		MoveTo(route.count-1-StepBackAmount, Step);
	}
	else
	{
		MoveTo(routePosition+dice.value, Step);
	}

	i = 0;
	repeat
	{
		if(Teleports[i][0] == routePosition)
		{
			MoveTo(Teleports[i][1], Slide);
			stop;
		}
		i=i+1;
	}
	until(i<Teleports.count)
	RESULT = true;
}

player1.WinCondition()
{
	if(piece1.routePosition==piece1.route.count-1)
	{
		RESULT=true;
	}
}

player2.WinCondition()
{
	if(piece2.routePosition==piece2.route.count-1)
	{
		RESULT=true;
	}
}
