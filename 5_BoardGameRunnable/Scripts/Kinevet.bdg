Dice dice(1,2,3,4,5,6);
Player player1("Player1");
Player player2("Player2");
Player player3("Player3");
Player player4("Player4");

Piece piece11(player1,1,1);
Piece piece12(player1,2,1);
Piece piece13(player1,3,1);
Piece piece14(player1,4,1);
player1.pieces.all.color=Color("#000080"); 
player1.pieces.all.route=
[(1,1),(0,0),(1,0),(2,0),(3,0),(4,0),(5,0),(6,0),(7,0),(8,0),(9,0),(10,0),
(11,0),(12,0),(13,0),(14,0),(15,0),(16,0),(17,0),(18,0),(19,0),(20,0),(21,0),
(22,0),(23,0),(24,0),(25,0),(26,0),(27,0),(28,0),(29,0),(30,0),(31,0),(32,0),
(33,0),(34,0),(35,0),(36,0),(37,0),(38,0),(39,0),(5,1),(6,1),(7,1),(8,1)];
piece12.route[0]=(2,1);
piece13.route[0]=(3,1);
piece14.route[0]=(4,1);
player1.Turn(<dice.Roll()>, <CheckValidMove()>, <SelectPiece(piece)>, <piece.Rule()>);

Piece piece21(player2,1,2);
Piece piece22(player2,2,2);
Piece piece23(player2,3,2);
Piece piece24(player2,4,2);
player2.pieces.all.color= Color("#800000");
player2.pieces.all.route=
[(1,2),(10,0),(11,0),(12,0),(13,0),(14,0),(15,0),(16,0),(17,0),(18,0),(19,0),
(20,0),(21,0),(22,0),(23,0),(24,0),(25,0),(26,0),(27,0),(28,0),(29,0),
(30,0),(31,0),(32,0),(33,0),(34,0),(35,0),(36,0),(37,0),(38,0),(39,0),
(0,0),(1,0),(2,0),(3,0),(4,0),(5,0),(6,0),(7,0),(8,0),(9,0),(5,2),(6,2),(7,2),(8,2)];
piece22.route[0]=(2,2);
piece23.route[0]=(3,2);
piece24.route[0]=(4,2);
player2.Turn(<dice.Roll()>, <CheckValidMove()>, <SelectPiece(piece)>, <piece.Rule()>);

Piece piece31(player3,1,3);
Piece piece32(player3,2,3);
Piece piece33(player3,3,3);
Piece piece34(player3,4,3);
player3.pieces.all.color= Color("#C0C000");
player3.pieces.all.route=
[(1,3),(20,0),(21,0),(22,0),(23,0),(24,0),(25,0),(26,0),(27,0),(28,0),(29,0),
(30,0),(31,0),(32,0),(33,0),(34,0),(35,0),(36,0),(37,0),(38,0),(39,0),
(0,0),(1,0),(2,0),(3,0),(4,0),(5,0),(6,0),(7,0),(8,0),(9,0),(10,0),(11,0),
(12,0),(13,0),(14,0),(15,0),(16,0),(17,0),(18,0),(19,0),(5,3),(6,3),(7,3),(8,3)];
piece32.route[0]=(2,3);
piece33.route[0]=(3,3);
piece34.route[0]=(4,3);
player3.Turn(<dice.Roll()>, <CheckValidMove()>, <SelectPiece(piece)>, <piece.Rule()>);

Piece piece41(player4,1,4);
Piece piece42(player4,2,4);
Piece piece43(player4,3,4);
Piece piece44(player4,4,4);  
player4.pieces.all.color= Color("Green");
player4.pieces.all.route=
[(1,4),(30,0),(31,0),(32,0),(33,0),(34,0),(35,0),(36,0),(37,0),(38,0),(39,0),
(0,0),(1,0),(2,0),(3,0),(4,0),(5,0),(6,0),(7,0),(8,0),(9,0),(10,0),(11,0),
(12,0),(13,0),(14,0),(15,0),(16,0),(17,0),(18,0),(19,0),(20,0),
(21,0),(22,0),(23,0),(24,0),(25,0),(26,0),(27,0),(28,0),(29,0),(5,4),(6,4),(7,4),(8,4)];
piece42.route[0]=(2,4);
piece43.route[0]=(3,4);
piece44.route[0]=(4,4);
player4.Turn(<dice.Roll()>, <CheckValidMove()>, <SelectPiece(piece)>, <piece.Rule()>);

FUNC.CheckValidMove()
{
	if(CurrentPlayer.TryTurn(<CurrentPlayer.pieces.all.Rule()>) == false)
	{
		CurrentPlayer.EndTurn();
	}
	RESULT = true;
}

players.all.pieces.all.Rule()
{
	if(routePosition == 0)
	{
		if(dice.value==6 AND route[1].pieces[0].player != player)
		{
			RESULT = true;
			if(!route[1].empty)
			{
				route[1].pieces[0].routePosition = 0;
			}
			MoveTo(routePosition+1, Step);
		}
	}
	else if((route[routePosition+dice.value].pieces[0].player != player OR routePosition + dice.value>41) AND routePosition<41)
	{
		RESULT = true;
		if(!route[routePosition+dice.value].empty AND routePosition<41)
		{
			route[routePosition+dice.value].pieces[0].routePosition = 0;
		}
		MoveTo(routePosition+dice.value, Step);
		if(routePosition >= 41)
		{
			if(route[44].empty)
			{
				routePosition=44;
			}
			else if(route[43].empty)
			{
				routePosition=43;
			}
			else if(route[42].empty)
			{
				routePosition=42;
			}
			else if(route[41].empty)
			{
				routePosition=41;
			}
		}	
	}
}

players.all.WinCondition()
{
	if(pieces.all.routePosition >= 41)
	{
		RESULT=true;
	}
}